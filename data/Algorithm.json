[
  {
    "name": "A* Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/a-search-algorithm/"
  },
  {
    "name": "Allocation (Binary Search on Answer)",
    "link": "https://codeforces.com/blog/entry/143038"
  },
  {
    "name": "Articulation Points & Bridges",
    "link": "https://cp-algorithms.com/graph/bridge-searching.html"
  },
  {
    "name": "Bellman-Ford Algorithm",
    "link": "https://cp-algorithms.com/graph/bellman_ford.html"
  },
  {
    "name": "Binary Indexed Tree (Fenwick Tree)",
    "link": "https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/"
  },
  {
    "name": "Binary Lifting",
    "link": "https://cp-algorithms.com/graph/lca_binary_lifting.html"
  },
  {
    "name": "Binary Search",
    "link": "https://www.geeksforgeeks.org/binary-search/"
  },
  {
    "name": "Bitmasking",
    "link": "https://www.geeksforgeeks.org/dsa/what-is-bitmasking/"
  },
  {
    "name": "Bitwise Operations",
    "link": "https://www.geeksforgeeks.org/bitwise-algorithms/"
  },
  {
    "name": "Biconnected Components",
    "link": "https://cp-algorithms.com/graph/bridge-searching.html"
  },
  {
    "name": "Centroid Decomposition",
    "link": "https://usaco.guide/plat/centroid?lang=cpp"
  },
  {
    "name": "Combinatorics",
    "link": "https://www.geeksforgeeks.org/combinatorics/"
  },
  {
    "name": "Comparator Functions",
    "link": "https://www.geeksforgeeks.org/java/java-comparator-interface/"
  },
  {
    "name": "Convex Hull",
    "link": "https://www.geeksforgeeks.org/convex-hull-set-1-jarviss-algorithm-or-wrapping/"
  },
  {
    "name": "Cycle Detection",
    "link": "https://cp-algorithms.com/graph/finding-cycle.html"
  },
  {
    "name": "De Bruijn Sequence / Eulerian Path",
    "link": "https://www.geeksforgeeks.org/de-bruijn-sequence-set-1/"
  },
  {
    "name": "DFS / BFS",
    "link": "https://www.wscubetech.com/resources/dsa/dfs-vs-bfs"
  },
  {
    "name": "Dijkstra's Algorithm",
    "link": "https://cp-algorithms.com/graph/dijkstra.html"
  },
  {
    "name": "Disjoint Set Union (Union-Find)",
    "link": "https://www.geeksforgeeks.org/disjoint-set-data-structures/"
  },
  {
    "name": "Divide and Conquer",
    "link": "https://www.geeksforgeeks.org/dsa/introduction-to-divide-and-conquer-algorithm/"
  },
  {
    "name": "Dynamic Programming",
    "link": "https://www.geeksforgeeks.org/dynamic-programming/"
  },
  {
    "name": "Euler Tour",
    "link": "https://www.geeksforgeeks.org/dsa/euler-tour-tree/"
  },
  {
    "name": "Fast Exponentiation (Binary Exp)",
    "link": "https://www.geeksforgeeks.org/dsa/exponential-squaring-fast-modulo-multiplication/"
  },
  {
    "name": "Floyd-Warshall Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/floyd-warshall-algorithm-dp-16/"
  },
  {
    "name": "Game Theory",
    "link": "https://www.geeksforgeeks.org/competitive-programming/game-theory/"
  },
  {
    "name": "Geometrical Analysis",
    "link": "https://www.geeksforgeeks.org/dsa/geometric-algorithms/"
  },
  {
    "name": "Greedy",
    "link": "https://www.geeksforgeeks.org/dsa/greedy-algorithms/"
  },
  {
    "name": "Heavy-Light Decomposition",
    "link": "https://cp-algorithms.com/graph/hld.html"
  },
  {
    "name": "Kadane's Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/largest-sum-contiguous-subarray/"
  },
  {
    "name": "KMP Algorithm",
    "link": "https://cp-algorithms.com/string/prefix-function.html"
  },
  {
    "name": "Kruskal's Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/kruskals-minimum-spanning-tree-algorithm-greedy-algo-2/"
  },
  {
    "name": "Least Common Ancestor (LCA)",
    "link": "https://cp-algorithms.com/graph/lca_binary_lifting.html"
  },
  {
    "name": "Line Sweep (Interval Merging)",
    "link": "https://www.geeksforgeeks.org/dsa/given-a-set-of-line-segments-find-if-any-two-segments-intersect/"
  },
  {
    "name": "Link-Cut Tree",
    "link": "https://www.geeksforgeeks.org/dsa/introduction-to-link-cut-tree/"
  },
  {
    "name": "Manacher's Algorithm",
    "link": "https://www.geeksforgeeks.org/manachers-algorithm-linear-time-longest-palindromic-substring-part-1/"
  },
  {
    "name": "Matrix Exponentiation",
    "link": "https://www.geeksforgeeks.org/matrix-exponentiation/"
  },
  {
    "name": "Minimum Deletions / Additions",
    "link": "https://www.youtube.com/watch?v=J_2DtfCHeSI"
  },
  {
    "name": "Mo's Algorithm",
    "link": "https://cp-algorithms.com/data_structures/sqrt_decomposition.html#mos-algorithm"
  },
  {
    "name": "Morris Traversal",
    "link": "https://www.geeksforgeeks.org/dsa/inorder-tree-traversal-without-recursion-and-without-stack/"
  },
  {
    "name": "Offline Queries",
    "link": "https://www.geeksforgeeks.org/dsa/what-are-online-and-offline-query-based-questions-in-competitive-programming/"
  },
  {
    "name": "Palindromic Tree (Eertree)",
    "link": "https://rosettacode.org/wiki/Eertree"
  },
  {
    "name": "Prefix Sum / Difference Array",
    "link": "https://www.geeksforgeeks.org/dsa/prefix-sum-array-implementation-applications-competitive-programming/"
  },
  {
    "name": "Prim's Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/prims-minimum-spanning-tree-mst-greedy-algo-5/"
  },
  {
    "name": "Recursion & Backtracking",
    "link": "https://www.geeksforgeeks.org/backtracking-algorithms/"
  },
  {
    "name": "Reservoir Sampling",
    "link": "https://www.geeksforgeeks.org/reservoir-sampling/"
  },
  {
    "name": "Rolling Hash / Rabin-Karp",
    "link": "https://www.geeksforgeeks.org/dsa/rabin-karp-algorithm-for-pattern-searching/"
  },
  {
    "name": "Segment Tree / Lazy Propagation",
    "link": "https://www.geeksforgeeks.org/dsa/segment-tree-sum-of-given-range/"
  },
  {
    "name": "Shortest path Algorithms",
    "link": "https://www.geeksforgeeks.org/dsa/shortest-path-algorithms-a-complete-guide/"
  },
  {
    "name": "Sieve of Eratosthenes",
    "link": "https://www.geeksforgeeks.org/sieve-of-eratosthenes/"
  },
  {
    "name": "Sliding Window",
    "link": "https://www.geeksforgeeks.org/window-sliding-technique/"
  },
  {
    "name": "Sparse Table",
    "link": "https://cp-algorithms.com/data_structures/sparse-table.html"
  },
  {
    "name": "Stack / Monotonic Stack",
    "link": "https://www.geeksforgeeks.org/stack-data-structure/"
  },
  {
    "name": "Strongly Connected Components (SCC)",
    "link": "https://www.geeksforgeeks.org/dsa/strongly-connected-components/"
  },
  {
    "name": "Sweep Line Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/given-a-set-of-line-segments-find-if-any-two-segments-intersect/"
  },
  {
    "name": "Tarjan's Algorithm",
    "link": "https://www.geeksforgeeks.org/dsa/tarjan-algorithm-find-strongly-connected-components/"
  },
  {
    "name": "Topological Sorting",
    "link": "https://www.geeksforgeeks.org/topological-sorting/"
  },
  {
    "name": "Trie (Prefix Tree)",
    "link": "https://www.geeksforgeeks.org/dsa/trie-insert-and-search/"
  },
  {
    "name": "Ternary Search",
    "link": "https://www.geeksforgeeks.org/ternary-search/"
  },
  {
    "name": "Two Pointers",
    "link": "https://www.geeksforgeeks.org/dsa/two-pointers-technique/"
  },
  {
    "name": "Union-Find / Disjoint Sets",
    "link": "https://www.geeksforgeeks.org/disjoint-set-data-structures/"
  },
  {
    "name": "Z-Algorithm",
    "link": "https://cp-algorithms.com/string/z-function.html"
  }
]
